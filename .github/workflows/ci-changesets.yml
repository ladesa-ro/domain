name: CI with Changesets - Version PR and Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  ci-changesets:
    name: Changesets CI

    runs-on: ubuntu-latest

    outputs:
      has_changesets: ${{ steps.changeset.outputs.hasChangesets }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          version: "latest"

      - run: bun install --frozen-lockfile

      - id: changeset
        uses: changesets/action@v1
        with:
          version: bun run changeset:version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ci-publish-npm:
    if: needs.ci-changesets.outputs.has_changesets == 'false'

    runs-on: ubuntu-latest
    needs: [ci-changesets]

    environment: 
      name: ci-pkg-npm

    steps:
      - name: Publish into NPM
        uses: devcontainers/ci@8bf61b26e9c3a98f69cb6ce2f88d24ff59b785c6
        env:
          NPM_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
        with:
          configFile: .devcontainer/devcontainer.json
          cacheFrom: ghcr.io/ladesa-ro/domain/devcontainer
          
          runCmd: |
            bun install --frozen-lockfile
            bun x nx exec --projects tag:npm-publish -- bun publish

  ci-publish-nuget:
    if: needs.ci-changesets.outputs.has_changesets == 'false'

    runs-on: ubuntu-latest
    needs: [ci-changesets]

    environment: 
      name: ci-pkg-nuget

    steps:
      - name: Publish into NuGet
        uses: devcontainers/ci@8bf61b26e9c3a98f69cb6ce2f88d24ff59b785c6
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
          NUGET_SERVER: ${{ secrets.NUGET_SERVER }}
        with:
          configFile: .devcontainer/devcontainer.json
          cacheFrom: ghcr.io/ladesa-ro/domain/devcontainer
          
          runCmd: |
            cd pkgs/integrations/dotnet/ladesa-domain-v4-sln;

            dotnet pack --configuration Release --output ./.nuget;

            pkgs=$(find './.nuget' -name '*.nupkg');

            for pkg in ${pkgs[*]} ;
            do
              dotnet nuget push ${pkg} --api-key "${NUGET_TOKEN}" -s ${NUGET_SERVER} --skip-duplicate
            done
